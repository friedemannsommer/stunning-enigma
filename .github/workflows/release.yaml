name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"

env:
  binary: stunning_enigma

jobs:
  release-wasm:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: rui314/setup-mold@v1
      - run: sudo ln -sf /usr/local/bin/mold /usr/bin/mold
      - uses: dtolnay/rust-toolchain@master
        with:
          target: wasm32-unknown-unknown
          toolchain: stable

      - name: Install dependencies
        run: sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: install wasm-bindgen-cli
        run: |
          cargo install wasm-bindgen-cli

      - name: Build
        run: cargo build --target wasm32-unknown-unknown --profile wasm-release

      - name: Prepare package
        run: |
          wasm-bindgen --no-typescript --out-name ${{ env.binary }} --out-dir wasm --target web target/wasm32-unknown-unknown/wasm-release/${{ env.binary }}.wasm
          cp -r assets wasm/

      - name: optimize Wasm
        uses: NiklasEi/wasm-opt-action@v2
        with:
          file: wasm/*.wasm

      - name: Package as a zip
        uses: vimtor/action-zip@v1
        with:
          files: wasm
          dest: ${{ env.binary }}-wasm-${{ github.ref_name }}.zip

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
          append_body: true
          draft: true
          fail_on_unmatched_files: true
          files: ${{ env.binary }}-wasm-${{ github.ref_name }}.zip

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          branch: gh-pages
          folder: wasm

  release-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v3
      - uses: rui314/setup-mold@v1
      - run: sudo ln -sf /usr/local/bin/mold /usr/bin/mold
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install dependencies
        run: |
          sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libwayland-dev libxkbcommon-dev

      - name: Build
        run: cargo build --release --target ${{ matrix.target }} --features linux,native

      - name: Prepare package
        run: |
          mkdir linux
          cp target/${{ matrix.target }}/release/${{ env.binary }} linux/
          cp -r assets linux/
      - name: Package as a zip
        uses: vimtor/action-zip@v1
        with:
          files: linux
          dest: ${{ env.binary }}-${{ matrix.target }}-${{ github.ref_name }}.zip

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
          append_body: true
          draft: true
          fail_on_unmatched_files: true
          files: ${{ env.binary }}-${{ matrix.target }}-${{ github.ref_name }}.zip

  release-windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }} --features native

      - name: Prepare package
        run: |
          mkdir windows
          cp target/${{ matrix.target }}/release/${{ env.binary }}.exe windows/
          cp -r assets windows/

      - name: Package as a zip
        uses: vimtor/action-zip@v1
        with:
          files: windows
          dest: ${{ env.binary }}-${{ matrix.target }}-${{ github.ref_name }}.zip

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
          append_body: true
          draft: true
          fail_on_unmatched_files: true
          files: ${{ env.binary }}-${{ matrix.target }}-${{ github.ref_name }}.zip

  release-macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Environment Setup
        run: |
          export CFLAGS="-fno-stack-check"
          export MACOSX_DEPLOYMENT_TARGET="10.9"

      - name: Build
        run: cargo build --release --target ${{ matrix.target }} --features native

      - name: Prepare Package
        run: |
          mkdir -p ${{ env.binary }}.app/Contents/MacOS
          cp target/${{ matrix.target }}/release/${{ env.binary }} ${{ env.binary }}.app/Contents/MacOS/
          cp -r assets ${{ env.binary }}.app/Contents/MacOS/
          hdiutil create -fs HFS+ -volname "${{ env.binary }}" -srcfolder ${{ env.binary }}.app ${{ env.binary }}-${{ matrix.target }}-${{ github.ref_name }}.dmg

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        with:
          append_body: true
          draft: true
          fail_on_unmatched_files: true
          files: ${{ env.binary }}-${{ matrix.target }}-${{ github.ref_name }}.dmg
