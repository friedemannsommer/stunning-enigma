name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - uses: rui314/setup-mold@v1
        if: runner.os == 'linux'
      - run: sudo ln -sf /usr/local/bin/mold /usr/bin/mold
        if: runner.os == 'linux'
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Dependencies
        if: runner.os == 'linux'
        run: sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libwayland-dev libxkbcommon-dev
      - name: Run cargo test (linux)
        if: runner.os == 'linux'
        run: cargo test --all-targets --features linux,native
      - name: Run cargo test (windows, macos)
        if: runner.os != 'linux'
        run: cargo test --all-targets --features native

  clippy_check:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - uses: rui314/setup-mold@v1
      - run: sudo ln -sf /usr/local/bin/mold /usr/bin/mold
      - uses: dtolnay/rust-toolchain@master
        with:
          components: clippy
          toolchain: stable
      - name: Install Dependencies
        run: sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libwayland-dev libxkbcommon-dev
      - name: Run clippy
        run: cargo clippy --all-targets --features linux,native -- -D warnings

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          components: rustfmt
          toolchain: stable
      - name: Run cargo fmt
        run: cargo fmt --all -- --check
